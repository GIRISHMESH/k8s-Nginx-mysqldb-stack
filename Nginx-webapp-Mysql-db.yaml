# =========================================================
# 1Ô∏è‚É£ Namespaces
# =========================================================
apiVersion: v1
kind: Namespace
metadata:
  name: nginx-stack
---
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx

# =========================================================
# 2Ô∏è‚É£ Secrets & ConfigMaps
# =========================================================
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: nginx-stack
type: Opaque
data:
  mysql-root-password: c2VjdXJlcGFzcw==   # base64 of 'securepass'
---
apiVersion: v1
kind: Secret
metadata:
  name: nginx-tls-secret
  namespace: nginx-stack
type: kubernetes.io/tls
data:
  tls.crt: <BASE64_CERT>
  tls.key: <BASE64_KEY>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  namespace: nginx-stack
data:
  mysql-url: mysql://mysql-0.mysql-headless.nginx-stack.svc.cluster.local:3306

# =========================================================
# 3Ô∏è‚É£ StorageClass
# =========================================================
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: mysql-storage
provisioner: kubernetes.io/azure-disk
reclaimPolicy: Retain
allowVolumeExpansion: true
parameters:
  skuName: Premium_LRS
  kind: managed
volumeBindingMode: WaitForFirstConsumer

# =========================================================
# 4Ô∏è‚É£ MySQL StatefulSet
# =========================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: nginx-stack
spec:
  serviceName: mysql-headless
  replicas: 3
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      securityContext:
        fsGroup: 999
      containers:
        - name: mysql
          image: mysql:8.1
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
          readinessProbe:
            exec:
              command: ["mysqladmin", "ping", "-h", "localhost"]
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            exec:
              command: ["mysqladmin", "ping", "-h", "localhost"]
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
  volumeClaimTemplates:
    - metadata:
        name: mysql-persistent-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: mysql-storage
        resources:
          requests:
            storage: 10Gi

# =========================================================
# 5Ô∏è‚É£ MySQL Services
# =========================================================
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
  namespace: nginx-stack
spec:
  clusterIP: None
  selector:
    app: mysql
  ports:
    - port: 3306
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: nginx-stack
spec:
  type: ClusterIP
  selector:
    app: mysql
  ports:
    - port: 3306

# =========================================================
# 6Ô∏è‚É£ NetworkPolicy
# =========================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-nginx-to-mysql
  namespace: nginx-stack
spec:
  podSelector:
    matchLabels:
      app: mysql
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: nginx-web
      ports:
        - protocol: TCP
          port: 3306
  policyTypes:
    - Ingress

# =========================================================
# 7Ô∏è‚É£ MySQL Init Job
# =========================================================
apiVersion: batch/v1
kind: Job
metadata:
  name: init-mysql
  namespace: nginx-stack
spec:
  template:
    spec:
      containers:
        - name: mysql-init
          image: mysql:8.1
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-root-password
          command:
            - sh
            - -c
            - >
              mysql -h mysql-0.mysql-headless.nginx-stack.svc.cluster.local
              -u root -p$MYSQL_ROOT_PASSWORD
              -e "CREATE DATABASE IF NOT EXISTS appdb;"
      restartPolicy: OnFailure

# =========================================================
# 8Ô∏è‚É£ Nginx Deployment & Service
# =========================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-web
  namespace: nginx-stack
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-web
  template:
    metadata:
      labels:
        app: nginx-web
    spec:
      initContainers:
        - name: wait-for-mysql
          image: busybox
          command:
            - sh
            - -c
            - >
              until nc -z mysql 3306; do
                echo "Waiting for MySQL...";
                sleep 2;
              done
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-web
  namespace: nginx-stack
spec:
  selector:
    app: nginx-web
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP

# =========================================================
# 9Ô∏è‚É£ Ingress Controller
# =========================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-nginx-controller
  namespace: ingress-nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/component: controller
    spec:
      containers:
        - name: controller
          image: k8s.gcr.io/ingress-nginx/controller:v1.10.0
          args:
            - --controller-class=k8s.io/ingress-nginx
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
            - --election-id=ingress-controller-leader
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
---
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-controller
  namespace: ingress-nginx
spec:
  type: LoadBalancer
  loadBalancerIP: <STATIC_IP>
  selector:
    app.kubernetes.io/component: controller
  ports:
    - name: http
      port: 80
      targetPort: 80
    - name: https
      port: 443
      targetPort: 443
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx
spec:
  controller: k8s.io/ingress-nginx

# =========================================================
# üîü Ingress Resource
# =========================================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-stack-ingress
  namespace: nginx-stack
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - web.yourdomain.com
      secretName: nginx-tls-secret
  rules:
    - host: web.yourdomain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx-web
                port:
                  number: 80

# =========================================================
# 1Ô∏è‚É£1Ô∏è‚É£ ExternalDNS with Workload Identity (OIDC)
# =========================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
  namespace: nginx-stack
  annotations:
    azure.workload.identity/client-id: <UAMI_CLIENT_ID>
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
rules:
  - apiGroups: [""]
    resources: ["services", "endpoints", "pods", "nodes"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
  - kind: ServiceAccount
    name: external-dns
    namespace: nginx-stack
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
  namespace: nginx-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec:
      serviceAccountName: external-dns
      containers:
        - name: external-dns
          image: k8s.gcr.io/external-dns/external-dns:v0.14.1
          args:
            - --source=service
            - --source=ingress
            - --domain-filter=yourdomain.com
            - --provider=azure
            - --azure-resource-group=<DNS_RG_NAME>
            - --azure-subscription-id=<SUBSCRIPTION_ID>
            - --log-level=debug
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
